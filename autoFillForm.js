// ==============================
    // OBTER DATA E HORA ATUAIS
    // ==============================

    function obterDataHoraAtual() {
        const now = new Date();
        const data = now.toLocaleDateString('pt-BR');
        const hora = now.toLocaleTimeString('pt-BR');
        return ` ${data} ${hora}`;
    }

    // ==============================
    // ETAPA 1: PREENCHER QUEST√ïES E NOME DO FORMUL√ÅRIO
    // ==============================

    // Vari√°vel para a sigla do cliente
let siglaCliente = "ABC";  // Substitua "ABC" pela sigla real que deseja usar

    
    // Lista de quest√µes do chatbot da FCFS (sem a quest√£o extra)
	const questoes = [
            {
                "name_text": "campeonatos_calendario",
                "msg_type": "Lista de op√ß√µes",
                "desc_text": "Escolha uma op√ß√£o:\n1Ô∏è‚É£ Calend√°rio 2025\n2Ô∏è‚É£ Categorias de Base",
                "opcoes": [
                    { key: "1", value: "Calend√°rio 2025" },
                    { key: "2", value: "Categorias de Base" }
                ]
            },        
        {
            "name_text": "boas_vindas",
            "msg_type": "Texto",
            "desc_text": "Ol√°! üëã Bem-vindo ao atendimento da Federa√ß√£o Catarinense de Futsal (FCFS)...",
            "goto_question": "",
            "order_int": 10,
            "type": "Texto"
        },
        {
            "name_text": "campeonatos_calendario",
            "msg_type": "Texto",
            "desc_text": "Voc√™ escolheu Campeonatos e Calend√°rio. ‚öΩ\n\nEscolha:\n1Ô∏è‚É£ Calend√°rio GERAL de 2025...",
            "goto_question": "",
            "order_int": 20,
            "type": "Texto"
        },
        {
            "name_text": "inscricoes_transferencias",
            "msg_type": "Texto",
            "desc_text": "Voc√™ escolheu Inscri√ß√µes e Transfer√™ncias de Atletas. üìù\n\nEscolha:\n1Ô∏è‚É£ Como inscrever um atleta/uma equipe...",
            "goto_question": "",
            "order_int": 30,
            "type": "Texto"
        }
    ];
    // Quest√£o extra fixa
    const questaoExtra = { name_text: "questao_extra", msg_type: "Texto", desc_text: "Esta √© uma quest√£o extra para evitar problemas.", goto_question: "", order_int: 40, type: "Texto" };

// Fun√ß√£o para preencher o nome do formul√°rio
function preencherNomeFormulario() {
    const nomeFormulario = document.querySelector('input[name="name_text"]');
    if (nomeFormulario) {
        const now = new Date();
        const data = now.toISOString().slice(0, 10); // Formato 'aaaa-mm-dd'
        const hora = now.toTimeString().slice(0, 5); // Formato 'hh:mm'

        nomeFormulario.value = `${siglaCliente}_${data}_${hora}`;
        nomeFormulario.dispatchEvent(new Event('input', { bubbles: true }));
        console.log(`‚úÖ Nome do formul√°rio preenchido com '${siglaCliente}_${data}_${hora}'!`);
    } else {
        console.error("‚ùå Campo de nome do formul√°rio n√£o encontrado!");
    }
}


// Fun√ß√£o para adicionar op√ß√µes quando a quest√£o for "Lista de op√ß√µes" (apenas cria os campos)
async function adicionarOpcoesLista(indexQuestao, questao) {
    if (questao.msg_type !== "Lista de op√ß√µes" || !questao.opcoes || questao.opcoes.length === 0) return;

    console.log(`üìå Criando op√ß√µes para a quest√£o ${indexQuestao + 1}...`);

    for (let i = 0; i < questao.opcoes.length; i++) {
        await adicionarFormOption(indexQuestao);
        await new Promise(resolve => setTimeout(resolve, 500)); // Pequeno delay para renderiza√ß√£o
    }
}

// Fun√ß√£o para preencher as op√ß√µes (depois que todas foram criadas)
async function preencherOpcoesLista(indexQuestao, questao) {
    if (questao.msg_type !== "Lista de op√ß√µes" || !questao.opcoes || questao.opcoes.length === 0) return;

    console.log(`‚úèÔ∏è Preenchendo op√ß√µes para a quest√£o ${indexQuestao + 1}...`);
    
    // Aguarda tempo extra para garantir que os campos foram renderizados
    await new Promise(resolve => setTimeout(resolve, 2000));

    let todasOpcoes = document.querySelectorAll(`input[name^="questions-${indexQuestao}-options-"][name$="-key"]`);
    let todasOpcoesValue = document.querySelectorAll(`input[name^="questions-${indexQuestao}-options-"][name$="-value"]`);

    if (todasOpcoes.length < questao.opcoes.length || todasOpcoesValue.length < questao.opcoes.length) {
        console.warn(`‚ö†Ô∏è Nem todas as op√ß√µes foram renderizadas corretamente. Tentando novamente...`);
        await new Promise(resolve => setTimeout(resolve, 2000)); // Espera mais 2s
        todasOpcoes = document.querySelectorAll(`input[name^="questions-${indexQuestao}-options-"][name$="-key"]`);
        todasOpcoesValue = document.querySelectorAll(`input[name^="questions-${indexQuestao}-options-"][name$="-value"]`);
    }

    for (let j = 0; j < questao.opcoes.length; j++) {
        if (todasOpcoes[j] && todasOpcoesValue[j]) {
            todasOpcoes[j].value = questao.opcoes[j].key;
            todasOpcoes[j].dispatchEvent(new Event('input', { bubbles: true }));

            todasOpcoesValue[j].value = questao.opcoes[j].value;
            todasOpcoesValue[j].dispatchEvent(new Event('input', { bubbles: true }));

            console.log(`‚úÖ Op√ß√£o ${j + 1} preenchida na quest√£o ${indexQuestao + 1}: ${questao.opcoes[j].key} - ${questao.opcoes[j].value}`);
        } else {
            console.error(`‚ùå Erro ao preencher op√ß√£o ${j + 1} na quest√£o ${indexQuestao + 1}`);
        }
    }
}

// Fun√ß√£o auxiliar para adicionar uma nova op√ß√£o dentro de uma quest√£o
async function adicionarFormOption(indexQuestao) {
    return new Promise((resolve, reject) => {
        let botoesAdicionar = document.querySelectorAll('.add-handler.djn-add-handler.djn-model-forms-formquestionoption');

        if (botoesAdicionar.length > indexQuestao) {
            console.log(`‚ûï Adicionando op√ß√£o √† quest√£o ${indexQuestao + 1}...`);
            botoesAdicionar[indexQuestao].click();

            setTimeout(() => {
                console.log(`‚úÖ Op√ß√£o adicionada √† quest√£o ${indexQuestao + 1}`);
                resolve();
            }, 1000);
        } else {
            console.error(`‚ùå Bot√£o de adicionar op√ß√£o n√£o encontrado para a quest√£o ${indexQuestao + 1}`);
            reject();
        }
    });
}





// Fun√ß√£o para preencher o campo de timeout
function preencherTimeout() {
    const responseTimeout = document.querySelector('input[name="response_timeout"]');
    if (responseTimeout) {
        responseTimeout.value = "1:00:00";
        responseTimeout.dispatchEvent(new Event('input', { bubbles: true }));
        console.log("‚úÖ Campo 'response_timeout' preenchido com '1:00:00'!");
    } else {
        console.error("‚ùå Campo 'response_timeout' n√£o encontrado!");
    }
}


// Fun√ß√£o para preencher o campo "Owner"
function preencherOwner() {
    const owner = document.querySelector('select[name="owner"]');
    if (owner) {
        for (let i = 0; i < owner.options.length; i++) {
            if (owner.options[i].text === "admin-ale") {
                owner.selectedIndex = i;
                owner.dispatchEvent(new Event('change', { bubbles: true }));
                console.log("‚úÖ Campo 'Owner' preenchido com 'admin-ale'!");
                return;
            }
        }
        console.error("‚ùå Op√ß√£o 'admin-ale' n√£o encontrada!");
    } else {
        console.error("‚ùå Campo 'Owner' n√£o encontrado!");
    }
}



// Fun√ß√£o para preencher o campo "Msg timeout"
function preencherMsgTimeout() {
    const msgTimeout = document.querySelector('textarea[name="msg_timeout"]');
    if (msgTimeout) {
        msgTimeout.value = "Timeout!";
        msgTimeout.dispatchEvent(new Event('input', { bubbles: true }));
        console.log("‚úÖ Campo 'Msg timeout' preenchido com 'Timeout!'");
    } else {
        console.error("‚ùå Campo 'Msg timeout' n√£o encontrado!");
    }
}

    // Fun√ß√£o para preencher o campo "End cmd text"
function preencherEndCmdText() {
    const endCmdText = document.querySelector('input[name="end_cmd_text"]');
    if (endCmdText) {
        endCmdText.value = "#cancelar";
        endCmdText.dispatchEvent(new Event('input', { bubbles: true }));
        console.log("‚úÖ Campo 'End cmd text' preenchido com '#cancelar'!");
    } else {
        console.error("‚ùå Campo 'End cmd text' n√£o encontrado!");
    }
}


// Fun√ß√£o para preencher o campo "Start cmd text"
function preencherStartCmdText() {
    const startCmdText = document.querySelector('input[name="start_cmd_text"]');
    if (startCmdText) {
        const now = new Date();
        const data = now.toISOString().slice(0, 10); // Formato 'aaaa-mm-dd'
        const hora = now.toTimeString().slice(0, 5).replace(':', ':'); // Formato 'hh:mm'

        startCmdText.value = `#${siglaCliente}_${data}_${hora}`;
        startCmdText.dispatchEvent(new Event('input', { bubbles: true }));
        console.log(`‚úÖ Campo 'Start cmd text' preenchido com '#${siglaCliente}_${data}_${hora}'!`);
    } else {
        console.error("‚ùå Campo 'Start cmd text' n√£o encontrado!");
    }
}



    // Fun√ß√£o para preencher o campo "Number group"
    function preencherNumberGroup() {
        const numberGroup = document.querySelector('select[name="number_group"]');
        if (numberGroup) {
            numberGroup.value = "1";  // Valor correspondente a "ZAP_Padr√£o (Ale/JS-API)"
            numberGroup.dispatchEvent(new Event('change', { bubbles: true }));
            console.log("‚úÖ Campo 'Number group' preenchido com 'ZAP_Padr√£o (Ale/JS-API)'!");
        } else {
            console.error("‚ùå Campo 'Number group' n√£o encontrado!");
        }
    }


    // Fun√ß√£o para preencher uma quest√£o
    function preencherQuestao(index, questao) {
        let todasQuestoes = document.querySelectorAll('input[name^="questions-"][name$="-name_text"]');

        if (todasQuestoes.length > index) {
            console.log(`‚úèÔ∏è Preenchendo quest√£o ${index + 1}`);

            todasQuestoes[index].value = questao.name_text;
            todasQuestoes[index].dispatchEvent(new Event('input', { bubbles: true }));

            let msgType = document.querySelectorAll('select[name^="questions-"][name$="-msg_type"]');
            if (msgType[index]) msgType[index].value = questao.msg_type;

            let descText = document.querySelectorAll('textarea[name^="questions-"][name$="-desc_text"]');
            if (descText[index]) descText[index].value = questao.desc_text;

            let orderInt = document.querySelectorAll('input[name^="questions-"][name$="-order_int"]');
            if (orderInt[index]) orderInt[index].value = questao.order_int;

            console.log(`‚úîÔ∏è Quest√£o ${index + 1} preenchida`);
        } else {
            console.error(`‚ùå Quest√£o ${index + 1} n√£o encontrada.`);
        }
    }

    // Fun√ß√£o para adicionar uma nova quest√£o
    function adicionarNovaQuestao(index, questao) {
        return new Promise((resolve, reject) => {
            let botaoAdicionar = document.querySelector('.add-handler.djn-add-handler.djn-model-forms-formquestion');

            if (botaoAdicionar) {
                botaoAdicionar.click();
                console.log(`üÜï Adicionando nova quest√£o ${index + 1}...`);

                setTimeout(() => {
                    preencherQuestao(index, questao);
                    resolve();
                }, 1000);
            } else {
                console.error("‚ùå Bot√£o de adicionar quest√£o n√£o encontrado!");
                reject();
            }
        });
    }

    // Fun√ß√£o principal para preencher todas as quest√µes e o nome do formul√°rio
    async function preencherChatbot() {
        console.log("‚ñ∂Ô∏è Preenchendo nome do formul√°rio...");
        preencherNomeFormulario();

        console.log("‚ñ∂Ô∏è Preenchendo quest√µes...");
        preencherQuestao(0, questoes[0]);

        for (let i = 1; i < questoes.length; i++) {
            await adicionarNovaQuestao(i, questoes[i]);
        }

        // Adiciona a quest√£o extra automaticamente
        let todasQuestoes = document.querySelectorAll('input[name^="questions-"][name$="-name_text"]');
        await adicionarNovaQuestao(todasQuestoes.length, questaoExtra);

        console.log("‚úÖ Todas as quest√µes foram preenchidas!");
    }

    // ==============================
    // ETAPA 2: ADICIONAR 3 OP√á√ïES POR QUEST√ÉO
    // ==============================

    async function adicionarFormOption(index) {
        return new Promise((resolve, reject) => {
            let botoesAdicionar = document.querySelectorAll('.add-handler.djn-add-handler.djn-model-forms-formquestionoption');

            if (botoesAdicionar.length > index) {
                console.log(`üü¢ Clicando no bot√£o de adicionar op√ß√£o para a quest√£o ${index + 1}...`);
                botoesAdicionar[index].click();

                setTimeout(() => {
                    console.log(`‚úÖ Op√ß√£o adicionada para a quest√£o ${index + 1}`);
                    resolve();
                }, 1000);
            } else {
                console.error(`‚ùå Bot√£o de adicionar op√ß√£o n√£o encontrado para a quest√£o ${index + 1}`);
                reject();
            }
        });
    }

    // Fun√ß√£o para adicionar 3 op√ß√µes a todas as quest√µes
    async function adicionarTodasFormOptions() {
        console.log("‚ñ∂Ô∏è Adicionando 3 op√ß√µes para cada quest√£o...");

        let todasQuestoes = document.querySelectorAll('input[name^="questions-"][name$="-name_text"]');

        for (let i = 0; i < todasQuestoes.length; i++) {
            console.log(`üìå Adicionando op√ß√µes na quest√£o ${i + 1}...`);

            for (let j = 0; j < 3; j++) {  // Adicionando 3 op√ß√µes para cada quest√£o
                console.log(`‚ûï Adicionando op√ß√£o ${j + 1} na quest√£o ${i + 1}...`);
                await adicionarFormOption(i);
            }
        }

        console.log("‚úÖ Todas as quest√µes receberam 3 op√ß√µes cada!");
    }

    // ==============================
    // ETAPA 3: PREENCHER OP√á√ïES
    // ==============================

// Fun√ß√£o para preencher as op√ß√µes de uma quest√£o
async function preencherTodasFormOptions() {
    console.log("‚ñ∂Ô∏è Preenchendo op√ß√µes extras...");

    let todasQuestoes = document.querySelectorAll('input[name^="questions-"][name$="-name_text"]');

    for (let i = 0; i < todasQuestoes.length; i++) {
        let todasOpcoes = document.querySelectorAll(`input[name^="questions-${i}-options-"][name$="-key"]`);
        let todasOpcoesValue = document.querySelectorAll(`input[name^="questions-${i}-options-"][name$="-value"]`);

        console.log(`üìå Encontradas ${todasOpcoes.length} op√ß√µes na quest√£o ${i + 1}.`);

        let preenchidos = 0; // Contador de quantos espa√ßos j√° foram preenchidos

        for (let j = 0; j < todasOpcoes.length; j++) {
            // Se o campo j√° tem um valor, significa que √© uma lista de op√ß√µes -> Pular preenchimento
            if (todasOpcoes[j].value.trim() !== "") {
                console.log(`‚ö†Ô∏è Espa√ßo ${j + 1} j√° preenchido com '${todasOpcoes[j].value}', pulando...`);
                continue;
            }

            if (preenchidos === 0) {
                todasOpcoes[j].value = `_RUN_TASK_AFTER`;
                todasOpcoesValue[j].value = `condo.tasks.update_order`;
            } else if (preenchidos === 1) {
                todasOpcoes[j].value = `_RUN_TASK_AFTER#order_id`;
                todasOpcoesValue[j].value = `{order.id}`;
            } else if (preenchidos === 2) {
                const numeroQuestao = (i + 1).toString().padStart(2, '0');
                todasOpcoes[j].value = `_RUN_TASK_AFTER#${numeroQuestao}. ${todasQuestoes[i].value}`;
                todasOpcoesValue[j].value = `{${todasQuestoes[i].value}${getExtensionByMsgType(questoes[i].msg_type)}}`;
            }

            todasOpcoes[j].dispatchEvent(new Event('input', { bubbles: true }));
            todasOpcoesValue[j].dispatchEvent(new Event('input', { bubbles: true }));

            console.log(`‚úÖ Op√ß√£o extra preenchida: ${todasOpcoes[j].value} -> ${todasOpcoesValue[j].value}`);
            preenchidos++;

            // Se j√° preenchemos todas as op√ß√µes extras, sa√≠mos do loop
            if (preenchidos >= 3) break;
        }
    }

    console.log("‚úÖ Todas as op√ß√µes extras foram preenchidas!");
}


// Fun√ß√£o para preencher as op√ß√µes extras (_RUN_TASK_AFTER) sem sobrescrever listas de op√ß√µes
async function preencherTodasFormOptions() {
    console.log("‚ñ∂Ô∏è Preenchendo op√ß√µes extras...");

    let todasQuestoes = document.querySelectorAll('input[name^="questions-"][name$="-name_text"]');

    for (let i = 0; i < todasQuestoes.length; i++) {
        let todasOpcoes = document.querySelectorAll(`input[name^="questions-${i}-options-"][name$="-key"]`);
        let todasOpcoesValue = document.querySelectorAll(`input[name^="questions-${i}-options-"][name$="-value"]`);

        console.log(`üìå Encontradas ${todasOpcoes.length} op√ß√µes na quest√£o ${i + 1}.`);

        let preenchidos = 0; // Contador de quantos espa√ßos j√° foram preenchidos

        for (let j = 0; j < todasOpcoes.length; j++) {
            // Se o campo j√° tem um valor, significa que √© uma lista de op√ß√µes -> Pular preenchimento
            if (todasOpcoes[j].value.trim() !== "") {
                console.log(`‚ö†Ô∏è Espa√ßo ${j + 1} j√° preenchido com '${todasOpcoes[j].value}', pulando...`);
                continue;
            }

            if (preenchidos === 0) {
                todasOpcoes[j].value = `_RUN_TASK_AFTER`;
                todasOpcoesValue[j].value = `condo.tasks.update_order`;
            } else if (preenchidos === 1) {
                todasOpcoes[j].value = `_RUN_TASK_AFTER#order_id`;
                todasOpcoesValue[j].value = `{order.id}`;
            } else if (preenchidos === 2) {
                const numeroQuestao = (i + 1).toString().padStart(2, '0');
                todasOpcoes[j].value = `_RUN_TASK_AFTER#${numeroQuestao}. ${todasQuestoes[i].value}`;
                todasOpcoesValue[j].value = `{${todasQuestoes[i].value}${getExtensionByMsgType(questoes[i].msg_type)}}`;
            }

            todasOpcoes[j].dispatchEvent(new Event('input', { bubbles: true }));
            todasOpcoesValue[j].dispatchEvent(new Event('input', { bubbles: true }));

            console.log(`‚úÖ Op√ß√£o extra preenchida: ${todasOpcoes[j].value} -> ${todasOpcoesValue[j].value}`);
            preenchidos++;

            // Se j√° preenchemos todas as op√ß√µes extras, sa√≠mos do loop
            if (preenchidos >= 3) break;
        }
    }

    console.log("‚úÖ Todas as op√ß√µes extras foram preenchidas!");
}

// ==============================
// EXECU√á√ÉO FINAL
// ==============================

async function executarSequencia() {
    console.log("üöÄ Iniciando sequ√™ncia...");

    console.log("‚ñ∂Ô∏è Passo 1: Preenchendo nome do formul√°rio...");
    preencherNomeFormulario();

    console.log("‚ñ∂Ô∏è Passo 2: Preenchendo campo 'Number group'...");
    preencherNumberGroup();

    console.log("‚ñ∂Ô∏è Passo 3: Preenchendo campo 'Owner'...");
    preencherOwner();

    console.log("‚ñ∂Ô∏è Passo 4: Preenchendo campo 'Start cmd text'...");
    preencherStartCmdText();

    console.log("‚ñ∂Ô∏è Passo 5: Preenchendo campo 'End cmd text'...");
    preencherEndCmdText();

    console.log("‚ñ∂Ô∏è Passo 6: Preenchendo campo 'response_timeout'...");
    preencherTimeout();

    console.log("‚ñ∂Ô∏è Passo 7: Preenchendo campo 'Msg timeout'...");
    preencherMsgTimeout();

    console.log("‚ñ∂Ô∏è Passo 8: Preenchendo quest√µes...");
    await preencherChatbot();
    console.log("‚úÖ Passo 8 conclu√≠do!");

    console.log("‚ñ∂Ô∏è Passo 9: Criando espa√ßos para todas as op√ß√µes...");
    for (let i = 0; i < questoes.length; i++) {
        await adicionarOpcoesLista(i, questoes[i]); // üîπ Criando os espa√ßos para listas de op√ß√µes
    }
    await adicionarTodasFormOptions(); // üîπ Criando os espa√ßos para op√ß√µes extras (_RUN_TASK_AFTER, order_id)
    console.log("‚úÖ Passo 9 conclu√≠do!");

    console.log("‚è≥ Aguardando tempo extra para garantir que os campos de op√ß√µes sejam renderizados...");
    await new Promise(resolve => setTimeout(resolve, 3000)); // Espera extra para seguran√ßa

    console.log("‚ñ∂Ô∏è Passo 10: Preenchendo valores das op√ß√µes da lista...");
    for (let i = 0; i < questoes.length; i++) {
        await preencherOpcoesLista(i, questoes[i]);
    }
    console.log("‚úÖ Passo 10 conclu√≠do!");

    console.log("‚ñ∂Ô∏è Passo 11: Preenchendo op√ß√µes extras (ex: _RUN_TASK_AFTER, order_id)...");
    await preencherTodasFormOptions(); // üîπ Agora preenche as op√ß√µes extras que j√° foram criadas
    console.log("‚úÖ Passo 11 conclu√≠do!");

    console.log("üéâ Processo finalizado com sucesso!");
}

// Inicia a sequ√™ncia
executarSequencia();

// Fun√ß√£o auxiliar para obter a extens√£o correta com base no tipo de mensagem
function getExtensionByMsgType(msgType) {
    switch (msgType) {
        case 'Texto':
            return '.text';
        case 'Num√©rico':
            return '.number';
        case 'Data':
            return '.date';
        case 'CEP':
            return '.text';
        case 'Sim/N√£o':
        case 'Lista de op√ß√µes':
            return '.value';
        case 'Localiza√ß√£o':
            return '|tojson';
        case 'Imagem':
        case 'V√≠deo':
        case '√Åudio':
        case 'Documento':
        case 'Assinatura':
            return '.url';
        case 'C√≥digo de Barras / QR':
        case 'Placa de carro':
            return '.text';
        case 'Sem resposta (pular para a pr√≥xima pergunta)':
            return '.text';
        default:
            return '.text';
    }
}


